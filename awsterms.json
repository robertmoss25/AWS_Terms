[
    {
        "AWSComponent": "Amazon Machine Images (AMI)",
        "URL": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "You must use an AMI from the same region as that of the EC2 instance. The region of the AMI has no bearing on the performance of the EC2 instance",
        "Blurb": "An Amazon Machine Image (AMI) provides the information required to launch an instance. You must specify an AMI when you launch an instance. You can launch multiple instances from a single AMI when you need multiple instances with the same configuration. You can use different AMIs to launch instances when you need instances with different configurations. An AMI includes the following: One or more Amazon Elastic Block Store (Amazon EBS) snapshots, or, for instance-store-backed AMIs, a template for the root volume of the instance (for example, an operating system, an application server, and applications). Launch permissions that control which AWS accounts can use the AMI to launch instances. A block device mapping that specifies the volumes to attach to the instance when it's launched.",
        "SeeAlso": "Elastic Block Store (EBS)"
    },
    {
        "AWSComponent": "Application Load Balancer (v2)",
        "URL": "https://docs.aws.amazon.com/whitepapers/latest/fault-tolerant-components/application-load-balancer.html",
        "Module": "High Availability and Scalability: ELB & ASG",
        "Comment": "<li>Application load balancers is Layer 7 (HTTP)</li><li>Load balancing to multiple HTTP applications across machines (target groups)</li><li>Load balancing to multiple applications on the same machine (ex: containers)</li><li>Support for HTTP/2 and WebSocket</li><li>Support redirects (from HTTP to HTTPS for example)</li>",
        "Blurb": "The Application Load Balancer is best suited for load balancing HTTP and HTTPS traffic and provides advanced request routing targeted at the delivery of modern application architectures, including microservices and containers. Operating at the individual request level (Layer 7), the Application Load Balancer routes traffic to targets within Amazon Virtual Private Cloud (Amazon VPC) based on the content of the request.",
        "SeeAlso": "Application Load Balancers (v2), Classic Load Balancer (v1), Elastic Load Balancers (ELB), Network Load Balancer (v2)"
    },
    {
        "AWSComponent": "Auto scaling Group (ASG)",
        "URL": "https://aws.amazon.com/autoscaling/",
        "Module": "High Availability and Scalability: ELB & ASG",
        "Comment": "Offers easy horizontal scaling of compute capacity.<li>Scaling policies can be on CPU, Network… and can even be on custom metrics or based on a schedule (if you know your visitors patterns)</li><li>ASGs use Launch configurations or Launch Templates (newer)</li><li>To update an ASG, you must provide a new launch configuration / launch template</li><li>IAM roles attached to an ASG will get assigned to EC2 instances</li><li>ASG are free. You pay for the underlying resources being launched</li><li>Having instances under an ASG means that if they get terminated for whatever reason, the ASG will automatically create new ones as a replacement. Extra safety!</li><li>ASG can terminate instances marked as unhealthy by an LB (and hence replace them)</li><li><strong>ASG Default Termination Policy (simplified version):</strong></li><ul><li>Find the AZ which has the most number of instances</li><li>If there are multiple instances in the AZ to choose from, delete the one with the oldest launch configuration</li></ul><li>ASG tries the balance the number of instances across AZ by default</li>.<br><strong>Lifecycle Hooks</strong><li>By default as soon as an instance is launched in an ASG it’s in service.</li><li>You have the ability to perform extra steps before the instance goes in service (Pending state)</li><li>You have the ability to perform some actions before the instance is terminated (Terminating state)</li>",
        "Blurb": "AWS Auto Scaling monitors your applications and automatically adjusts capacity to maintain steady, predictable performance at the lowest possible cost. Using AWS Auto Scaling, it’s easy to setup application scaling for multiple resources across multiple services in minutes. The service provides a simple, powerful user interface that lets you build scaling plans for resources including Amazon EC2 instances and Spot Fleets, Amazon ECS tasks, Amazon DynamoDB tables and indexes, and Amazon Aurora Replicas. AWS Auto Scaling makes scaling simple with recommendations that allow you to optimize performance, costs, or balance between them. If you’re already using Amazon EC2 Auto Scaling to dynamically scale your Amazon EC2 instances, you can now combine it with AWS Auto Scaling to scale additional resources for other AWS services. With AWS Auto Scaling, your applications always have the right resources at the right time. ",
        "SeeAlso": "Elastic Load Balancers (ELB), Auto scaling Group - Sacling Policies"
    },
    {
        "AWSComponent": "Auto scaling Group - Scaling Policies",
        "URL": "https://docs.aws.amazon.com/autoscaling/ec2/userguide/scaling_plan.html",
        "Module": "High Availability and Scalability: ELB & ASG",
        "Comment": "<li>Target Tracking Scaling</li><ul><li>Most simple and easy to set-up</li><li>Example: I want the average ASG CPU to stay at around 40%</li></ul><li>Simple / Step Scaling</li><ul><li>When a CloudWatch alarm is triggered (example CPU > 70%), then add 2 units</li><li>When a CloudWatch alarm is triggered (example CPU < 30%), then remove 1</li></ul><li>Scheduled Actions</li><ul><li>Anticipate a scaling based on known usage patterns</li><li>Example: increase the min capacity to 10 at 5 pm on Fridays</li></ul>.",
        "Blurb": "Scaling is the ability to increase or decrease the compute capacity of your application. Scaling starts with an event, or scaling action, which instructs an Auto Scaling group to either launch or terminate Amazon EC2 instances.",
        "SeeAlso": "EC2"
    },
    {
        "AWSComponent": "Classic Load Balancer (v1)",
        "URL": "https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/introduction.html",
        "Module": "High Availability and Scalability: ELB & ASG",
        "Comment": "<li>Supports TCP (Layer 4), HTTP & HTTPS (Layer 7)</li><li>Health checks are TCP or HTTP based</li><li>Fixed hostname XXX.region.elb.amazonaws.com</li>",
        "Blurb": "A load balancer distributes incoming application traffic across multiple EC2 instances in multiple Availability Zones. This increases the fault tolerance of your applications. Elastic Load Balancing detects unhealthy instances and routes traffic only to healthy instances.",
        "SeeAlso": "Application Load Balancer (v2), Elastic Load Balancers (ELB), Network Load Balancer (v2)"
    },
    {
        "AWSComponent": "EC2",
        "URL": "https://aws.amazon.com/ec2/?ec2-whats-new.sort-by=item.additionalFields.postDateTime&ec2-whats-new.sort-order=desc",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<li>Scheduled Instances</li><li>Convertible Instances</li><li>Dedicated Hosts</li><li>Spot Instances</li><br>Cheapest Infrastructure as a service Uses EBS to store data Uses ELB to distribute load Scales using ASG Uses Security Group for firewall rules<br><br><strong>There is a one-minute minimum charge for Linux based EC2 instances.</strong>",
        "Blurb": "Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides secure, resizable compute capacity in the cloud. It is designed to make web-scale cloud computing easier for developers. Amazon EC2’s simple web service interface allows you to obtain and configure capacity with minimal friction. It provides you with complete control of your computing resources and lets you run on Amazon’s proven computing environment.",
        "SeeAlso": "EC2 Hibernate, EC2 Instances Launch Types, EC2 IP Addressing, EC2 User Data, Security Groups, SSH"
    },
    {
        "AWSComponent": "EC2 Hibernate",
        "URL": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<li>We know we can stop, terminate instances</li><ul><li>Stop: the data on disk (EBS) is kept intact in the next start</li><li>Terminate: any EBS volumes (root) also set-up to be destroyed is lost</li></ul><li>On start, the following happens:</li><ul><li>First start: the OS boots & the EC2 User Data script is run</li><li>Following starts: the OS boots up</li><li>Then your application starts, caches get warmed up, and that can take time!</li>",
        "Blurb": "When you hibernate an instance, Amazon EC2 signals the operating system to perform hibernation (suspend-to-disk). Hibernation saves the contents from the instance memory (RAM) to your Amazon Elastic Block Store (Amazon EBS) root volume. Amazon EC2 persists the instance's EBS root volume and any attached EBS data volumes.",
        "SeeAlso": "EC2"
    },
    {
        "AWSComponent": "EC2 Instances Launch Types",
        "URL": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<li><strong>On Demand Instances:</strong> short workload, predictable pricing</li><li><strong>Reserved:</strong> (MINIMUM 1 year)</li><ul><li>Reserved Instances: long workloads</li><li>Convertible Reserved Instances: long workloads with flexible instances</li><li>Scheduled Reserved Instances: example – every Thursday between 3 and 6 pm</li></ul><li><strong>Spot Instances:</strong> short workloads, for cheap, can lose instances (less reliable)</li><li><strong>Dedicated Instances:</strong> no other customers will share your hardware</li><li><strong>Dedicated Hosts:</strong> book an entire physical server, control instance placement</li>",
        "Blurb": "EC2 provides the following purchasing options to enable you to optimize your costs based on your needs<br><br><li><strong>On demand:</strong> coming and staying in resort whenever we like, we pay the full price</li><li><strong>Reserved:</strong>like planning ahead and if we plan to stay for a long time, we may get a good discount.</li><li><strong>Spot instances:</strong> the hotel allows people to bid for the empty rooms and the highest bidder keeps the rooms. You can get kicked out at any time</li><li><strong>Dedicated Hosts:</strong>We book an entire building of the resort</li>",
        "SeeAlso": "EC2, EC2 Instance Types"
    },
    {
        "AWSComponent": "EC2 Instance Types",
        "URL": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<li>R: applications that needs a lot of RAM – in-memory caches</li><li>C: applications that needs good CPU – compute / databases</li><li>M: applications that are balanced (think “medium”) – general / web app</li><li>I: applications that need good local I/O (instance storage) – databases</li><li>G: applications that need a GPU – video rendering / machine learning</li><li>T2 / T3: burstable instances (up to a capacity)</li><li>T2 / T3 - unlimited: unlimited burst</li>",
        "Blurb": "When you launch an instance, the instance type that you specify determines the hardware of the host computer used for your instance. Each instance type offers different compute, memory, and storage capabilities, and is grouped in an instance family based on these capabilities. Select an instance type based on the requirements of the application or software that you plan to run on your instance.",
        "SeeAlso": "EC2, EC2 Instances Launch Types"
    },
    {
        "AWSComponent": "EC2 IP Addressing",
        "URL": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<strong>Public IPs</strong><br><li>Public IP means the machine can be identified on the internet (WWW)</li><li>Must be unique across the whole web.</li><li>Can be geo-located easily</li><strong>Private IPs</strong><br><li>Private IP means the machine can only be identified on a private network only</li><li>The IP must be unique across the private network</li><li>BUT two different private networks (two companies) can have the same IPs.</li><li>Machines connect to WWW using a NAT + internet gateway (a proxy)</li><li>Only a specified range of IPs can be used as private IP</li><strong>Elastic IPs</strong><br><li>When you stop and then start an EC2 instance, it can change its public IP.</li><li>If you need to have a fixed public IP for your instance, you need an Elastic IP</li><li>An Elastic IP is a public IPv4 IP you own as long as you don’t delete it</li><li>You can attach it to one instance at a time</li><li>With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account.</li><li>You can only have 5 Elastic IP in your account (you can ask AWS to increase that).</li>",
        "Blurb": "Amazon EC2 and Amazon VPC support both the IPv4 and IPv6 addressing protocols. By default, Amazon EC2 and Amazon VPC use the IPv4 addressing protocol; you can't disable this behavior. When you create a VPC, you must specify an IPv4 CIDR block (a range of private IPv4 addresses). You can optionally assign an IPv6 CIDR block to your VPC and subnets, and assign IPv6 addresses from that block to instances in your subnet. IPv6 addresses are reachable over the Internet.",
        "SeeAlso": "EC2"
    },
    {
        "AWSComponent": "EC2 User Data",
        "URL": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-add-user-data.html",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<li>It is possible to bootstrap our instances using an EC2 User data script.</li><li>bootstrapping means launching commands when a machine starts</li><li>That script is only run once at the instance first start</li><li>EC2 user data is used to automate boot tasks such as:</li><ul><li>Installing updates</li><li>Installing software</li><li>Downloading common files from the internet</li><li>Anything you can think of</li></ul><li>The EC2 User Data Script runs with the root user</li>",
        "Blurb": "Allows the bootstratpping of the EC2 instance at startup",
        "SeeAlso": "EC2"
    },
    {
        "AWSComponent": "Elastic Load Balancers (ELB)",
        "URL": "https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/what-is-load-balancing.html",
        "Module": "High Availability and Scalability: ELB & ASG",
        "Comment": "Distribute traffic across backend EC2 instances, can be Multi-AZ. 3 Types Classic, Application and Network. <br><br><strong>Cross-Zone Load Balancing</strong><li>With Cross Zone Load Balancing: each load balancer instance distributes evenly across all registered instances in all AZ</li><li>Otherwise, each load balancer node distributes requests evenly across the registered instances in its Availability Zone only.</li><br><li>Classic Load Balancer</li><ul><li>Disabled by default</li><li>No charges for inter AZ data if enabled</li></ul><li>Application Load Balancer</li><ul><li>Always on (can’t be disabled)</li><li>No charges for inter AZ data</li></ul><li>Network Load Balancer</li><ul><li>Disabled by default</li><li>You pay charges ($) for inter AZ data if enabled</li></ul><strong>Load Balancer Stickiness</strong><li>It is possible to implement stickiness so that the same client is always redirected to the same instance behind a load balancer</li><li>This works for Classic Load Balancers & Application Load Balancers</li>",
        "Blurb": "Elastic Load Balancing automatically distributes your incoming traffic across multiple targets, such as EC2 instances, containers, and IP addresses, in one or more Availability Zones. It monitors the health of its registered targets, and routes traffic only to the healthy targets. Elastic Load Balancing scales your load balancer as your incoming traffic changes over time. It can automatically scale to the vast majority of workloads.",
        "SeeAlso": "Application Load Balancer (v2), Classic Load Balancer (v1), Elastic Load Balancers (ELB)"
    },
    {
        "AWSComponent": "Elastic Network Interfaces (ENI)",
        "URL": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<li>Logical component in a VPC that represents a virtual network card</li><li>The ENI can have the following attributes:</li><ul><li>Primary private IPv4, one or more secondary IPv4</li><li>One Elastic IP (IPv4) per private IPv4</li><li>One Public IPv4</li><li>One or more security groups</li><li>A MAC address</li></ul><li>You can create ENI independently and attach them on the fly (move them) on EC2 instances for failover</li><li>Bound to a specific availability zone (AZ)</li>",
        "Blurb": "An elastic network interface is a logical networking component in a VPC that represents a virtual network card.",
        "SeeAlso": "EC2"
    },
    {
        "AWSComponent": "IAM",
        "URL": "https://aws.amazon.com/iam/#:~:text=AWS%20Identity%20and%20Access%20Management%20(IAM)%20enables%20you%20to%20manage,offered%20at%20no%20additional%20charge.",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<li>One IAM User per PHYSICAL PERSON</li><li>One IAM Role per Application</li><li>IAM credentials should NEVER BE SHARED</li><li>Never, ever, ever, ever, write IAM credentials in code. EVER.</li><li>And even less, NEVER EVER EVER COMMIT YOUR IAM credentials</li><li>Never use the ROOT account except for initial setup.</li><li>Never use ROOT IAM Credentials</li>",
        "Blurb": "AWS Identity and Access Management (IAM) enables you to manage access to AWS services and resources securely. Using IAM, you can create and manage AWS users and groups, and use permissions to allow and deny their access to AWS resources.",
        "SeeAlso": "Security Groups"
    },
    {
        "AWSComponent": "Network Load Balancer (v2)",
        "URL": "https://docs.aws.amazon.com/whitepapers/latest/fault-tolerant-components/network-load-balancer.html",
        "Module": "High Availability and Scalability: ELB & ASG",
        "Comment": "<li>Network load balancers (Layer 4) allow to:</li><ul><li>Forward TCP & UDP traffic to your instances</li><li>Handle millions of request per seconds</li><li>Less latency ~100 ms (vs 400 ms for ALB)</li></ul><li>NLB has one static IP per AZ, and supports assigning Elastic IP (helpful for whitelisting specific IP)</li><li>NLB are used for extreme performance, TCP or UDP traffic</li><li>Not included in the AWS free tier</li>",
        "Blurb": "Network Load Balancer is best suited for load balancing of Transmission Control Protocol (TCP), User Datagram Protocol (UDP), and Transport Layer Security (TLS) traffic where extreme performance is required. Operating at the connection level (Layer 4), Network Load Balancer routes traffic to targets within Amazon VPC and is capable of handling millions of requests per second while maintaining ultra-low latencies. Network Load Balancer is also optimized to handle sudden and volatile traffic patterns.",
        "SeeAlso": "Application Load Balancer (v2), Classic Load Balancer (v1), Elastic Load Balancers (ELB)"
    },
    {
        "AWSComponent": "Placement Groups",
        "URL": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<li><strong>Cluster</strong> - packs instances close together inside an Availability Zone. This strategy enables workloads to achieve the low-latency network performance necessary for tightly-coupled node-to-node communication that is typical of HPC applications.</li><li><strong>Partition</strong> - spreads your instances across logical partitions such that groups of instances in one partition do not share the underlying hardware with groups of instances in different partitions. This strategy is typically used by large distributed and replicated workloads, such as Hadoop, Cassandra, and Kafka (Scales to 100s of EC2 instances per group, 7 partitions per AZ).</li><li><strong>Spread</strong> - strictly places a small group of instances across distinct underlying hardware to reduce correlated failures. (max 7 instances per group per AZ)</li>",
        "Blurb": "When you launch a new EC2 instance, the EC2 service attempts to place the instance in such a way that all of your instances are spread out across underlying hardware to minimize correlated failures. You can use placement groups to influence the placement of a group of interdependent instances to meet the needs of your workload. Depending on the type of workload, you can create a placement group using one of the following placement strategies:",
        "SeeAlso": "EC2"
    },
    {
        "AWSComponent": "Security Groups",
        "URL": "https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<li>Can be attached to multiple instances</li><li>Locked down to a region / VPC combination</li><li>Does live “outside” the EC2 – if traffic is blocked the EC2 instance won’t see it</li><li>It’s good to maintain one separate security group for SSH access</li><li>If your application is not accessible (time out), then it’s a security group issue</li><li>If your application gives a “connection refused“ error, then it’s an application error or it’s not launched</li><li>All inbound traffic is blocked by default</li><li>All outbound traffic is authorised by default</li>",
        "Blurb": "A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups. If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.<br><br>For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. This section describes the basic things that you need to know about security groups for your VPC and their rules.<br><br>You might set up network ACLs with rules similar to your security groups in order to add an additional layer of security to your VPC. For more information about the differences between security groups and network ACLs, see Comparison of security groups and network ACLs.",
        "SeeAlso": "EC2, IAM"
    },
    {
        "AWSComponent": "SSH",
        "URL": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstances.html",
        "Module": "AWS Fundamentals: IAM & EC2",
        "Comment": "<li>Use SSH application</li><li>Use Putty</li><li>Use EC2 Instance Connect</li>",
        "Blurb": "SSH can be used by Mac, Linux and Windows 10, Putty is used by Windows, EC2 Instance connect is a web base interface",
        "SeeAlso": "EC2"
    }
]